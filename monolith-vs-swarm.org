# -*- org-confirm-babel-evaluate: nil; -*-
#+AUTHOR: Dan ÄŒermÃ¡k
#+DATE: February 4, 2024
#+EMAIL: dcermak@suse.com
#+TITLE: The Monolith versus The Swarm
#+SUBTITLE: A comparison of openSUSE's and Fedora's build infrastructure

#+REVEAL_ROOT: ./node_modules/reveal.js/
#+REVEAL_THEME: simple
#+REVEAL_PLUGINS: (highlight notes history)
#+OPTIONS: toc:nil
#+REVEAL_DEFAULT_FRAG_STYLE: appear
#+REVEAL_INIT_OPTIONS: transition: 'none', hash: true
#+OPTIONS: num:nil toc:nil center:nil reveal_title_slide:nil
#+REVEAL_EXTRA_CSS: ./node_modules/@fortawesome/fontawesome-free/css/all.min.css
#+REVEAL_EXTRA_CSS: ./custom-style.css
#+REVEAL_HIGHLIGHT_CSS: ./node_modules/reveal.js/plugin/highlight/zenburn.css

#+REVEAL_TITLE_SLIDE: <h2 class="title">%t</h2>
#+REVEAL_TITLE_SLIDE: <p class="subtitle" style="color: Gray;">%s</p>
#+REVEAL_TITLE_SLIDE: <p class="author">%a</p>
#+REVEAL_TITLE_SLIDE: <div style="float:left"><a href="https://fosdem.org/2024/" target="_blank"><img src="./media/FOSDEM_logo.svg" height="50px" style="margin-bottom:-12px"/> FOSDEM 2024</a></div>
#+REVEAL_TITLE_SLIDE: <div style="float:right;font-size:35px;"><p xmlns:dct="http://purl.org/dc/terms/" xmlns:cc="http://creativecommons.org/ns#"><a href="https://creativecommons.org/licenses/by/4.0" target="_blank" rel="license noopener noreferrer" style="display:inline-block;">
#+REVEAL_TITLE_SLIDE: CC BY 4.0 <i class="fab fa-creative-commons"></i> <i class="fab fa-creative-commons-by"></i></a></p></div>

* who -u

Dan ÄŒermÃ¡k

@@html: <div style="float:center">@@
@@html: <table class="who-table">@@
@@html: <tr><td><i class="fab fa-suse"></i></td><td> Software Developer @SUSE</td></tr>@@
@@html: <tr><td><i class="fab fa-fedora"></i></td><td> i3 SIG, Package maintainer</td></tr>@@
@@html: <tr><td><i class="far fa-heart"></i></td><td> Developer Tools, Testing and Documentation, Home Automation</td></tr>@@
@@html: <tr></tr>@@
@@html: <tr></tr>@@
@@html: <tr><td><i class="fa-solid fa-globe"></i></td><td> <a href="https://dancermak.name/">https://dancermak.name</a></td></tr>@@
@@html: <tr><td><i class="fab fa-github"></i></td><td> <a href="https://github.com/dcermak/">dcermak</a> </td></tr>@@
@@html: <tr><td><i class="fab fa-mastodon"></i></td><td> <a href="https://mastodon.social/@Defolos">@Defolos@mastodon.social</a></td></tr>@@
@@html: </table>@@
@@html: </div>@@

* Why?

#+ATTR_REVEAL: :frag (appear)
- very similar distributions, but no shared ancestry
- vastly different build systems
- learn from each other?

* Parts of a Build System

#+begin_notes
- RPM building
- repository assembly
- image/container build
- publishing
- package monitoring
- source control
#+end_notes

#+ATTR_REVEAL: :frag (appear)
@@html:<img src="./media/linux-distro-build-pipeline.svg"/>@@


* The Monolith

The Open Build Service

#+ATTR_REVEAL: :frag (appear)
- distro building swiss army knife
- can build RPMs, DEBs, Arch tar.xz, containers, VMs, ...
- automated rebuilds on transitive dependency changes
- built-in publisher
- custom version control system
- staging area, submit requests


** History

#+ATTR_REVEAL: :frag (appear)
- replacement of autobuild
- first design phase in late 2005
- introduced to Factory in 2009


** Overview

@@html:<img src="./media/obs-overview.svg"/>@@


** Projects and packages

@@html:<img src="./media/obs-devel_microos.png"/>@@

#+REVEAL: split

@@html:<img src="./media/obs-architecture.svg"/>@@

#+REVEAL: split

@@html:<img src="./media/obs-cross-project.svg"/>@@


** Version Control

#+begin_notes
- custom via XML API
#+end_notes

#+ATTR_REVEAL: :frag (appear)
- =osc= mimics subversion
- no subfolders or branches
- branching creates new projects with a =_link=


** =prjconf=

#+begin_notes
- set stuff like repo types (rpm, docker, image, etc.)
  or build flags
- allows to completely override all macros \Rightarrow in Fedora that's done via
  =redhat-rpm-config= & =srpm-*-macros-*= packages
  \Rightarrow much more flexibility per project
#+end_notes

#+ATTR_REVEAL: :frag (appear appear) :frag_idx (1 2)
- configure project building & publishing
- tweak macros & dependencies of a project

#+ATTR_REVEAL: :frag appear :frag_idx 3
#+begin_src
BuildFlags: sbom:spdx
PublishFlags: withsbom
Macros:
%suse_version 1699
%is_opensuse 1
%build_ldflags %{?_lto_cflags}
:Macros
#+end_src


** Submitrequests

@@html:<img src="media/obs-submitrequest.png" height="400px"/>@@

#+ATTR_REVEAL: :frag (appear)
- send changes of a forked (aka "branched") package
- send new packages into projects


* The Swarm

@@html:<img src="media/The_Zerg_swarm.png"/ height="500px">@@

** Pagure

#+begin_notes
- mostly Python: Flask + pygit, some perl for SSH
- issue & PRs are saved in another repo
- wiki is a repo
  \Rightarrow full migration between instances possible
- integrations not there
- development is very slow atm
- remote pull request support
#+end_notes

@@html:<img src="media/Overview-pagure-Pagure.io.png" height="300px"/>@@

#+ATTR_REVEAL: :frag (appear)
- FLOSS git forge written in Python using Flask + PyGit
- every package has repositories for: source code, wiki, issues + pull requests, metadata of PRs

** Koji

#+begin_notes
- mock for building -> can be cheap
- rebuilds SRPM, then per arch build

- per target build root
- builds on all *all* arches must succeed for build success

- builds can be fully replayed
- side tags, buildroot overrides
- nowadays integration with dist-git
#+end_notes

@@html:<img src="./media/koji-i3-build.png"/>@@

#+ATTR_REVEAL: :frag (appear)
- RPM build system using mock
- only *one* production build per NEVR can exist
- builds persist *for ever*


** Pungi
#+begin_notes
- assemble repos before image build
- nothing like this exactly in obs
#+end_notes

# https://docs.pagure.org/pungi/_images/phases.svg
@@html:<img src="./media/pungi-phases.svg"/>@@

#+ATTR_REVEAL: :frag (appear)
distribution composition tool


** Image Building

#+ATTR_REVEAL: :frag (appear)
1. OSBS
2. ImageFactory
3. kiwi + koji
4. osbuild


** MBS

#+ATTR_REVEAL: :frag (appear)
let's not talk about this one ðŸ™Š


** Koschei

@@html:<img src="./media/koschei-emacs.png"/>@@

#+ATTR_REVEAL: :frag (appear)
- dependency & build tracker
- runs koji scratch builds


** Bodhi

@@html:<img src="./media/bodhi-emacs-update.png" height="300px"/>@@

#+ATTR_REVEAL: :frag (appear)
- update testing facility
- vote on updates
- gate Rawhide


** Fedora Messaging & Notifications

#+ATTR_REVEAL: :frag (appear)
- @@html:<i class="fa-brands fa-fedora"></i>@@: AMQP based messaging bus
- feeds Fedora Message Notifications ([[https://github.com/fedora-infra/fmn][FMN]])


* The Good, The Bad and The Ugly

** The Good

@@html:<i class="fa-brands fa-opensuse"></i>@@
- very flexible
- "easy" to cary out large scale changes
- *one* place for everything

@@html:<i class="fa-brands fa-fedora"></i>@@
- simple individual systems
- easy to extend


** The Bad

#+begin_notes
- getting started 
#+end_notes

- the documentation

@@html:<i class="fa-brands fa-opensuse"></i>@@
- the version control
- handling of "stable" distributions
- =Unresolvable: have choice for=

@@html:<i class="fa-brands fa-fedora"></i>@@
- no automatic rebuilds


** The Ugly

#+begin_notes
ugly Fedora example: deltarpm
#+end_notes

@@html:<i class="fa-brands fa-opensuse"></i>@@
- complexity & edge cases
- hard to extend

@@html:<i class="fa-brands fa-fedora"></i>@@
- too many systems
- duplication


* Who's better?

#+ATTR_REVEAL: :frag (appear)
- both setups suck in their own ways
- monolith: one place to rule them all
- swarm: 



* Questions?

#+ATTR_REVEAL: :frag (appear)
Answers!
